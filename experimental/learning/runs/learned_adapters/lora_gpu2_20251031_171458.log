================================================================================
LEARNED ADAPTER EXPERIMENT - LORA
================================================================================
Platform: hpc
Log file: /projects/m000066/sujinesh/LatentWire/experimental/learning/runs/learned_adapters/lora_gpu2_20251031_171458.log
GPU assigned: 2

Loading models on hpc...
Using bfloat16 for H100
Using Flash Attention 2
Downloading shards:   0%|          | 0/4 [00:00<?, ?it/s]Downloading shards:   0%|          | 0/4 [00:00<?, ?it/s]Downloading shards: 100%|##########| 4/4 [00:00<00:00, 1511.60it/s]Downloading shards: 100%|##########| 4/4 [00:00<00:00, 1511.60it/s]

Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|##5       | 1/4 [00:00<00:00,  3.58it/s]Loading checkpoint shards:  25%|##5       | 1/4 [00:00<00:00,  3.58it/s]Loading checkpoint shards:  50%|#####     | 2/4 [00:00<00:00,  3.73it/s]Loading checkpoint shards:  50%|#####     | 2/4 [00:00<00:00,  3.73it/s]Loading checkpoint shards:  75%|#######5  | 3/4 [00:00<00:00,  3.86it/s]Loading checkpoint shards:  75%|#######5  | 3/4 [00:00<00:00,  3.86it/s]Loading checkpoint shards: 100%|##########| 4/4 [00:01<00:00,  3.93it/s]Loading checkpoint shards: 100%|##########| 4/4 [00:01<00:00,  3.93it/s]Loading checkpoint shards: 100%|##########| 4/4 [00:01<00:00,  3.87it/s]Loading checkpoint shards: 100%|##########| 4/4 [00:01<00:00,  3.87it/s]

Downloading shards:   0%|          | 0/3 [00:00<?, ?it/s]Downloading shards:   0%|          | 0/3 [00:00<?, ?it/s]Downloading shards: 100%|##########| 3/3 [00:00<00:00, 2648.48it/s]Downloading shards: 100%|##########| 3/3 [00:00<00:00, 2648.48it/s]

Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|###3      | 1/3 [00:00<00:00,  2.87it/s]Loading checkpoint shards:  33%|###3      | 1/3 [00:00<00:00,  2.87it/s]Loading checkpoint shards:  67%|######6   | 2/3 [00:00<00:00,  3.33it/s]Loading checkpoint shards:  67%|######6   | 2/3 [00:00<00:00,  3.33it/s]Loading checkpoint shards: 100%|##########| 3/3 [00:00<00:00,  3.58it/s]Loading checkpoint shards: 100%|##########| 3/3 [00:00<00:00,  3.58it/s]Loading checkpoint shards: 100%|##########| 3/3 [00:00<00:00,  3.43it/s]Loading checkpoint shards: 100%|##########| 3/3 [00:00<00:00,  3.43it/s]


Training LoRAAdapter...
Found checkpoint at /projects/m000066/sujinesh/LatentWire/experimental/learning/runs/learned_adapters/lora_checkpoint/checkpoint.pt, resuming training...
/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py:870: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(checkpoint_path, map_location=device)
/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py:870: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(checkpoint_path, map_location=device)
Resuming from epoch 1
Loading dataset (10000 samples)...
/users/sujinesh/.local/lib/python3.10/site-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(
/users/sujinesh/.local/lib/python3.10/site-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(

================================================================================
TRAINING CONFIGURATION
================================================================================
Total epochs: 10
Steps per epoch: 1000
Total training steps: 10000
Batch size: 10
Gradient accumulation: 8 (effective batch: 80)
Learning rate: 5e-05
Alignment layers: [16]
================================================================================


================================================================================
Epoch 2/10
================================================================================

================================================================================
Epoch 2/10
================================================================================
  Step 10/1000: Loss = 8.3221
  Step 20/1000: Loss = 8.2738
  Step 30/1000: Loss = 8.2868
  Step 40/1000: Loss = 8.2903
  Step 50/1000: Loss = 8.2729
  Step 60/1000: Loss = 8.2592
  Step 70/1000: Loss = 8.2628
  Step 80/1000: Loss = 8.2643
  Step 90/1000: Loss = 8.2580
  [ 10.0%] Step  100/1000 | Loss: 8.2426 | 0.62 steps/s | ETA: 24.2m
  [ 10.0%] Step  100/1000 | Loss: 8.2426 | 0.62 steps/s | ETA: 24.2m
  Step 110/1000: Loss = 8.2488
  Step 120/1000: Loss = 8.2472
  Step 130/1000: Loss = 8.2430
  Step 140/1000: Loss = 8.2414
  Step 150/1000: Loss = 8.2379
  Step 160/1000: Loss = 8.2351
  Step 170/1000: Loss = 8.2368
  Step 180/1000: Loss = 8.2357
  Step 190/1000: Loss = 8.2376
  [ 20.0%] Step  200/1000 | Loss: 8.2357 | 0.72 steps/s | ETA: 18.6m
  [ 20.0%] Step  200/1000 | Loss: 8.2357 | 0.72 steps/s | ETA: 18.6m
  Step 210/1000: Loss = 8.2353
  Step 220/1000: Loss = 8.2330
  Step 230/1000: Loss = 8.2318
  Step 240/1000: Loss = 8.2294
  Step 250/1000: Loss = 8.2263
  Step 260/1000: Loss = 8.2269
  Step 270/1000: Loss = 8.2238
  Step 280/1000: Loss = 8.2211
  Step 290/1000: Loss = 8.2185
  [ 30.0%] Step  300/1000 | Loss: 8.2174 | 0.75 steps/s | ETA: 15.5m
  [ 30.0%] Step  300/1000 | Loss: 8.2174 | 0.75 steps/s | ETA: 15.5m
  Step 310/1000: Loss = 8.2153
  Step 320/1000: Loss = 8.2117
  Step 330/1000: Loss = 8.2122
  Step 340/1000: Loss = 8.2115
  Step 350/1000: Loss = 8.2105
  Step 360/1000: Loss = 8.2117
  Step 370/1000: Loss = 8.2118
