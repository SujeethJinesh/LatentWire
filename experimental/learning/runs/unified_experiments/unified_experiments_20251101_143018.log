Using DDP (DistributedDataParallel) with torchrun for 4 GPUs

W1101 14:30:20.609000 2647027 torch/distributed/run.py:793] 
W1101 14:30:20.609000 2647027 torch/distributed/run.py:793] *****************************************
W1101 14:30:20.609000 2647027 torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1101 14:30:20.609000 2647027 torch/distributed/run.py:793] *****************************************
==> Using CUDA on HPC (4 GPUs available)
  - Batch size per GPU: 10
  - Global batch size: 40
  - Effective batch (with grad accum): 320
  - Samples: 10000
  - Epochs: 5
  - BF16: True
  - Flash Attention: True
Python: 3.10.14 | packaged by conda-forge | (main, Mar 20 2024, 12:45:18) [GCC 12.3.0]
PyTorch: 2.5.1+cu121
CUDA available: True
CUDA devices: 4
[W1101 14:30:32.711965791 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())

✓ Initialized DDP: 4 processes (rank 0)
  Backend: nccl
  Device for rank 0: cuda:0
================================================================================
UNIFIED CROSS-MODEL ALIGNMENT EXPERIMENTS
Timestamp: 2025-11-01T14:30:32.706212
Platform: hpc
Device: cuda
Available CUDA GPUs: 4
DDP: Running with 4 processes
================================================================================
==> Using CUDA on HPC (4 GPUs available)
  - Batch size per GPU: 10
  - Global batch size: 40
  - Effective batch (with grad accum): 320
  - Samples: 10000
  - Epochs: 5
  - BF16: True
  - Flash Attention: True
Python: 3.10.14 | packaged by conda-forge | (main, Mar 20 2024, 12:45:18) [GCC 12.3.0]
PyTorch: 2.5.1+cu121
CUDA available: True
CUDA devices: 4
==> Using CUDA on HPC (4 GPUs available)
==> Using CUDA on HPC (4 GPUs available)
[W1101 14:30:32.800455902 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())
  - Batch size per GPU: 10  - Batch size per GPU: 10
  - Global batch size: 40
  - Effective batch (with grad accum): 320
  - Samples: 10000
  - Epochs: 5
  - BF16: True
  - Flash Attention: True
Python: 3.10.14 | packaged by conda-forge | (main, Mar 20 2024, 12:45:18) [GCC 12.3.0]
PyTorch: 2.5.1+cu121
CUDA available: True
CUDA devices: 4

  - Global batch size: 40
  - Effective batch (with grad accum): 320
  - Samples: 10000
  - Epochs: 5
  - BF16: True
  - Flash Attention: True
Python: 3.10.14 | packaged by conda-forge | (main, Mar 20 2024, 12:45:18) [GCC 12.3.0][W1101 14:30:32.819086422 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())

PyTorch: 2.5.1+cu121
CUDA available: True
CUDA devices: 4
[W1101 14:30:32.831128223 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())
[rank0]:[W1101 14:30:33.549698117 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank1]:[W1101 14:30:33.728300397 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank3]:[W1101 14:30:33.728420727 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank2]:[W1101 14:30:33.728197742 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.

2. Starting all experiments sequentially (FAST-FIRST ORDER)...
Strategy: Each experiment uses all 4 GPUs for faster completion
NEW PRIORITY: Run FAST experiments first (Procrustes + Activation), then SLOW (trained adapters)
  Phase 1 (FAST): Procrustes + Activation for BOTH model pairs (~30 min)
  Phase 2 (SLOW): LoRA, Linear, Affine on Llama 3.1-3.2 first (~2-3 hours)
  Phase 3 (SLOW): LoRA, Token, Linear, Affine on Llama-Mistral (~2-3 hours)
Benefits: Quick insights + early validation + fail fast on model access


================================================================================
EXPERIMENT 1/11: ACTIVATION COMMUNICATION (LLAMA 3.1-3.2)
================================================================================
Models: Llama 3.1 8B (4096 dim) → Llama 3.2 3B (3072 dim)
Reproducing Ramesh & Li (ICML 2025) - activation injection with learned projection
WHY FIRST: Core feasibility test for cross-model communication
Fixes: Replacement (not addition), last token only, forward hooks, dimension handling


================================================================================
ACTIVATION COMMUNICATION EXPERIMENT (Ramesh & Li 2025 Reproduction)
================================================================================
Model A (source): meta-llama/Llama-3.1-8B
Model B (target): meta-llama/Llama-3.2-3B
Method: Replace target's last-token activation with source's projected activation


Loading models on hpc...
Using bfloat16 for H100
Using Flash Attention 2
Downloading shards:   0%|          | 0/4 [00:00<?, ?it/s]Downloading shards: 100%|██████████| 4/4 [00:00<00:00, 3178.71it/s]
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:00<00:01,  2.71it/s]Loading checkpoint shards:  50%|█████     | 2/4 [00:00<00:00,  2.55it/s]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:01<00:00,  2.39it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:01<00:00,  2.48it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:01<00:00,  2.48it/s]
Downloading shards:   0%|          | 0/2 [00:00<?, ?it/s]Downloading shards: 100%|██████████| 2/2 [00:00<00:00, 3598.72it/s]
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:00<00:00,  2.33it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  2.69it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  2.62it/s]

Model A: 4096 hidden_dim, 32 layers
Model B: 3072 hidden_dim, 28 layers

Dimension mismatch detected (4096 → 3072)
Looking for learned projection at: /projects/m000066/sujinesh/LatentWire/experimental/learning/runs/learned_projection/projection_4096_to_3072.pt
  ✗ No pre-trained projection found
  Training new projection on C4 dataset (per Ramesh & Li 2025)

================================================================================
TRAINING LEARNED PROJECTION (Ramesh & Li 2025)
================================================================================
Loading 3072 sentences from C4 dataset...
Loaded 3069 sentences from C4

Extracting layer-26 final-token activations...
Using batch size 32 for activation extraction
Extracting activations:   0%|          | 0/96 [00:00<?, ?it/s]Extracting activations:   1%|          | 1/96 [00:02<03:54,  2.46s/it]Extracting activations:   2%|▏         | 2/96 [00:04<03:01,  1.93s/it]Extracting activations:   3%|▎         | 3/96 [00:05<02:24,  1.56s/it]Extracting activations:   4%|▍         | 4/96 [00:06<01:58,  1.29s/it]Extracting activations:   5%|▌         | 5/96 [00:07<01:49,  1.20s/it]Extracting activations:   6%|▋         | 6/96 [00:08<01:44,  1.16s/it]Extracting activations:   7%|▋         | 7/96 [00:09<01:38,  1.10s/it]Extracting activations:   8%|▊         | 8/96 [00:09<01:29,  1.02s/it]Extracting activations:   9%|▉         | 9/96 [00:10<01:27,  1.00s/it]Extracting activations:  10%|█         | 10/96 [00:12<01:29,  1.05s/it]Extracting activations:  11%|█▏        | 11/96 [00:13<01:29,  1.05s/it]Extracting activations:  12%|█▎        | 12/96 [00:14<01:25,  1.02s/it]Extracting activations:  14%|█▎        | 13/96 [00:15<01:23,  1.01s/it]Extracting activations:  15%|█▍        | 14/96 [00:16<01:25,  1.04s/it]Extracting activations:  16%|█▌        | 15/96 [00:17<01:23,  1.03s/it]Extracting activations:  17%|█▋        | 16/96 [00:18<01:27,  1.10s/it]Extracting activations:  18%|█▊        | 17/96 [00:19<01:23,  1.06s/it]Extracting activations:  19%|█▉        | 18/96 [00:20<01:27,  1.12s/it]Extracting activations:  20%|█▉        | 19/96 [00:21<01:25,  1.11s/it]Extracting activations:  21%|██        | 20/96 [00:22<01:25,  1.13s/it]Extracting activations:  22%|██▏       | 21/96 [00:24<01:23,  1.11s/it]Extracting activations:  23%|██▎       | 22/96 [00:25<01:21,  1.10s/it]Extracting activations:  24%|██▍       | 23/96 [00:26<01:19,  1.08s/it]Extracting activations:  25%|██▌       | 24/96 [00:27<01:18,  1.09s/it]Extracting activations:  26%|██▌       | 25/96 [00:28<01:14,  1.05s/it]Extracting activations:  27%|██▋       | 26/96 [00:29<01:16,  1.09s/it]Extracting activations:  28%|██▊       | 27/96 [00:30<01:14,  1.08s/it]Extracting activations:  29%|██▉       | 28/96 [00:31<01:09,  1.03s/it]Extracting activations:  30%|███       | 29/96 [00:32<01:06,  1.01it/s]Extracting activations:  31%|███▏      | 30/96 [00:33<01:07,  1.03s/it]Extracting activations:  32%|███▏      | 31/96 [00:34<01:07,  1.05s/it]Extracting activations:  33%|███▎      | 32/96 [00:35<01:06,  1.04s/it]Extracting activations:  34%|███▍      | 33/96 [00:36<01:02,  1.00it/s]Extracting activations:  35%|███▌      | 34/96 [00:37<01:02,  1.01s/it]Extracting activations:  36%|███▋      | 35/96 [00:38<01:07,  1.11s/it]Extracting activations:  38%|███▊      | 36/96 [00:39<01:02,  1.04s/it]Extracting activations:  39%|███▊      | 37/96 [00:40<00:58,  1.00it/s]Extracting activations:  40%|███▉      | 38/96 [00:41<01:03,  1.09s/it]Extracting activations:  41%|████      | 39/96 [00:42<01:01,  1.07s/it]Extracting activations:  42%|████▏     | 40/96 [00:43<00:58,  1.04s/it]Extracting activations:  43%|████▎     | 41/96 [00:44<00:58,  1.06s/it]Extracting activations:  44%|████▍     | 42/96 [00:45<00:56,  1.05s/it]Extracting activations:  45%|████▍     | 43/96 [00:47<00:56,  1.07s/it]Extracting activations:  46%|████▌     | 44/96 [00:48<00:53,  1.04s/it]Extracting activations:  47%|████▋     | 45/96 [00:48<00:51,  1.01s/it]Extracting activations:  48%|████▊     | 46/96 [00:50<00:51,  1.04s/it]Extracting activations:  49%|████▉     | 47/96 [00:51<00:54,  1.11s/it]Extracting activations:  50%|█████     | 48/96 [00:52<00:50,  1.05s/it]Extracting activations:  51%|█████     | 49/96 [00:54<01:04,  1.37s/it]Extracting activations:  52%|█████▏    | 50/96 [00:55<00:59,  1.28s/it]Extracting activations:  53%|█████▎    | 51/96 [00:56<00:53,  1.20s/it]Extracting activations:  54%|█████▍    | 52/96 [00:57<00:49,  1.13s/it]Extracting activations:  55%|█████▌    | 53/96 [00:58<00:46,  1.08s/it]Extracting activations:  56%|█████▋    | 54/96 [00:59<00:46,  1.10s/it]Extracting activations:  57%|█████▋    | 55/96 [01:00<00:44,  1.08s/it]Extracting activations:  58%|█████▊    | 56/96 [01:01<00:40,  1.01s/it]Extracting activations:  59%|█████▉    | 57/96 [01:02<00:37,  1.04it/s]Extracting activations:  60%|██████    | 58/96 [01:03<00:38,  1.01s/it]Extracting activations:  61%|██████▏   | 59/96 [01:04<00:38,  1.05s/it]Extracting activations:  62%|██████▎   | 60/96 [01:05<00:36,  1.01s/it]Extracting activations:  64%|██████▎   | 61/96 [01:06<00:35,  1.00s/it]Extracting activations:  65%|██████▍   | 62/96 [01:07<00:35,  1.04s/it]Extracting activations:  66%|██████▌   | 63/96 [01:08<00:34,  1.05s/it]Extracting activations:  67%|██████▋   | 64/96 [01:09<00:32,  1.00s/it]Extracting activations:  68%|██████▊   | 65/96 [01:10<00:30,  1.01it/s]Extracting activations:  69%|██████▉   | 66/96 [01:11<00:29,  1.01it/s]Extracting activations:  70%|██████▉   | 67/96 [01:12<00:29,  1.00s/it]Extracting activations:  71%|███████   | 68/96 [01:13<00:30,  1.10s/it]Extracting activations:  72%|███████▏  | 69/96 [01:14<00:27,  1.03s/it]Extracting activations:  73%|███████▎  | 70/96 [01:15<00:26,  1.03s/it]Extracting activations:  74%|███████▍  | 71/96 [01:16<00:25,  1.03s/it]Extracting activations:  75%|███████▌  | 72/96 [01:17<00:24,  1.01s/it]Extracting activations:  76%|███████▌  | 73/96 [01:18<00:22,  1.01it/s]Extracting activations:  77%|███████▋  | 74/96 [01:19<00:21,  1.02it/s]Extracting activations:  78%|███████▊  | 75/96 [01:21<00:23,  1.12s/it]Extracting activations:  79%|███████▉  | 76/96 [01:22<00:21,  1.08s/it]Extracting activations:  80%|████████  | 77/96 [01:22<00:19,  1.02s/it]Extracting activations:  81%|████████▏ | 78/96 [01:23<00:18,  1.00s/it]Extracting activations:  82%|████████▏ | 79/96 [01:25<00:17,  1.04s/it]Extracting activations:  83%|████████▎ | 80/96 [01:26<00:16,  1.03s/it]Extracting activations:  84%|████████▍ | 81/96 [01:26<00:15,  1.01s/it]Extracting activations:  85%|████████▌ | 82/96 [01:27<00:13,  1.04it/s]Extracting activations:  86%|████████▋ | 83/96 [01:28<00:12,  1.01it/s]Extracting activations:  88%|████████▊ | 84/96 [01:29<00:11,  1.00it/s]Extracting activations:  89%|████████▊ | 85/96 [01:30<00:10,  1.01it/s]Extracting activations:  90%|████████▉ | 86/96 [01:31<00:09,  1.00it/s]Extracting activations:  91%|█████████ | 87/96 [01:33<00:10,  1.11s/it]Extracting activations:  92%|█████████▏| 88/96 [01:34<00:08,  1.12s/it]Extracting activations:  93%|█████████▎| 89/96 [01:35<00:07,  1.06s/it]Extracting activations:  94%|█████████▍| 90/96 [01:36<00:06,  1.01s/it]Extracting activations:  95%|█████████▍| 91/96 [01:37<00:04,  1.02it/s]Extracting activations:  96%|█████████▌| 92/96 [01:38<00:04,  1.03s/it]Extracting activations:  97%|█████████▋| 93/96 [01:39<00:03,  1.01s/it]Extracting activations:  98%|█████████▊| 94/96 [01:40<00:02,  1.02s/it]Extracting activations:  99%|█████████▉| 95/96 [01:41<00:01,  1.00s/it]Extracting activations: 100%|██████████| 96/96 [01:42<00:00,  1.02s/it]Extracting activations: 100%|██████████| 96/96 [01:42<00:00,  1.07s/it]
Activations A shape: torch.Size([3069, 4096])
Activations B shape: torch.Size([3069, 3072])

Training projection matrix for 10 epochs...
[rank0]: Traceback (most recent call last):
[rank0]:   File "/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py", line 4660, in <module>
[rank0]:     main()
[rank0]:   File "/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py", line 4355, in main
[rank0]:     activation_results_ablation = run_activation_communication_experiment(model_a_id=LLAMA_31_8B, model_b_id=LLAMA_32_3B)
[rank0]:   File "/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py", line 3517, in run_activation_communication_experiment
[rank0]:     learned_projection = train_learned_projection(
[rank0]:   File "/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py", line 1279, in train_learned_projection
[rank0]:     z_pred = projection(y_batch)  # [B, dim_b]
[rank0]:   File "/users/sujinesh/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/users/sujinesh/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/projects/m000066/sujinesh/LatentWire/experimental/learning/unified_cross_model_experiments.py", line 1112, in forward
[rank0]:     return self.proj(x)
[rank0]:   File "/users/sujinesh/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/users/sujinesh/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/users/sujinesh/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py", line 125, in forward
[rank0]:     return F.linear(input, self.weight, self.bias)
[rank0]: RuntimeError: expected mat1 and mat2 to have the same dtype, but got: c10::BFloat16 != float
