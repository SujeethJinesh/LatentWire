name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every Monday at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest pytest-cov pytest-xdist pytest-timeout
        # Install PyTorch CPU version for CI
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        # Install core dependencies
        pip install transformers>=4.30.0 tokenizers datasets accelerate
        pip install numpy scipy scikit-learn
        pip install sentencepiece protobuf
        # Optional dependencies (continue on error)
        pip install peft || true
        pip install bitsandbytes || true

    - name: Run tests
      env:
        PYTHONPATH: .
        PYTORCH_ENABLE_MPS_FALLBACK: 1
        TOKENIZERS_PARALLELISM: false
      run: |
        pytest tests/ \
          --verbose \
          --color=yes \
          --tb=short \
          --maxfail=10 \
          --timeout=300 \
          --cov=latentwire \
          --cov-report=xml \
          --cov-report=term-missing \
          --ignore=tests/integration/test_checkpoint_roundtrip.py \
          -x

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate test report
      if: always()
      run: |
        echo "### Test Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage.xml ]; then
          echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        fi

  check-configs:
    name: Validate Configurations
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml

    - name: Validate smoke configs
      run: |
        python -c "
        import json
        import os
        from pathlib import Path

        configs_dir = Path('configs/smoke')
        if configs_dir.exists():
            for config_file in configs_dir.glob('*.json'):
                print(f'Checking {config_file}...')
                with open(config_file) as f:
                    data = json.load(f)
                assert 'model' in data, f'{config_file} missing model section'
                assert 'data' in data, f'{config_file} missing data section'
                print(f'  âœ“ {config_file.name} is valid')
        print('All configs validated successfully!')
        "

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy

    - name: Run ruff
      run: |
        ruff check latentwire tests --format=github
      continue-on-error: true

    - name: Check formatting with black
      run: |
        black --check --diff latentwire tests --line-length 120
      continue-on-error: true

    - name: Check import order
      run: |
        isort --check-only --diff latentwire tests
      continue-on-error: true

    - name: Type checking with mypy
      run: |
        mypy latentwire --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        pip freeze | safety check --stdin
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        bandit -r latentwire -f json -o bandit-report.json
      continue-on-error: true