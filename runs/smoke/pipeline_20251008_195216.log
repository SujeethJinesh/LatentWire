Starting GPU monitoring → runs/smoke/gpu_monitor.log

>>> Combination 1: m64_dz256_rl2_rh4
    RUN_TAG=smoke
    EPOCHS_STAGEA=4 | EPOCHS_STAGEB=8
    WARMUP_TEXT_LATENT_EPOCHS_STAGEA=2.0 | WARMUP_TEXT_LATENT_EPOCHS_STAGEB=1.5

=== CUDA preflight ===
torch: 2.4.0+cu121 cuda: 12.1 available: True
CUDA_VISIBLE_DEVICES: 0,1,2,3
PYTORCH_CUDA_ALLOC_CONF: expandable_segments:True

=== Stage A: Llama latent fit ===

/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/transformers/utils/hub.py:128: FutureWarning: Using `TRANSFORMERS_CACHE` is deprecated and will be removed in v5 of Transformers. Use `HF_HOME` instead.
  warnings.warn(
[Optimization] Enabled FlashAttention-2 and memory-efficient kernels
[Optimization] Enabled TF32 for matmul and cuDNN
Loading dataset subset...
Loading SQuAD subset...
Downloading shards:   0%|          | 0/4 [00:00<?, ?it/s]Downloading shards: 100%|██████████| 4/4 [00:00<00:00, 3655.17it/s]
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:01<00:04,  1.34s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:02<00:02,  1.25s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:03<00:01,  1.20s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.20it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.02it/s]
[meta-llama/Meta-Llama-3.1-8B-Instruct] hf_device_map: {'model.embed_tokens': 0, 'model.rotary_emb': 0, 'model.layers.0': 0, 'model.layers.1': 0, 'model.layers.2': 0, 'model.layers.3': 0, 'model.layers.4': 0, 'model.layers.5': 0, 'model.layers.6': 0, 'model.layers.7': 0, 'model.layers.8': 1, 'model.layers.9': 1, 'model.layers.10': 1, 'model.layers.11': 1, 'model.layers.12': 1, 'model.layers.13': 1, 'model.layers.14': 1, 'model.layers.15': 1, 'model.layers.16': 2, 'model.layers.17': 2, 'model.layers.18': 2, 'model.layers.19': 2, 'model.layers.20': 2, 'model.layers.21': 2, 'model.layers.22': 2, 'model.layers.23': 2, 'model.layers.24': 3, 'model.layers.25': 3, 'model.layers.26': 3, 'model.layers.27': 3, 'model.layers.28': 3, 'model.layers.29': 3, 'model.layers.30': 3, 'model.layers.31': 3, 'model.norm': 3, 'lm_head': 3}
[meta-llama/Meta-Llama-3.1-8B-Instruct] Initializing 3 latent adapters at layers (5, 10, 15)
[meta-llama/Meta-Llama-3.1-8B-Instruct] Placed latent adapter for layer 5 on device cuda:0
[meta-llama/Meta-Llama-3.1-8B-Instruct] Placed latent adapter for layer 10 on device cuda:1
[meta-llama/Meta-Llama-3.1-8B-Instruct] Placed latent adapter for layer 15 on device cuda:1
[meta-llama/Meta-Llama-3.1-8B-Instruct] Latent adapters: 459,399,171 trainable parameters

🔧 Applying LoRA (r=8, alpha=8)...
   Llama BEFORE LoRA: 0 trainable / 8,030,261,248 total
trainable params: 6,815,744 || all params: 8,037,076,992 || trainable%: 0.0848
   Llama AFTER LoRA:  6,815,744 trainable / 8,037,076,992 total
   ✓ Added 6,815,744 LoRA parameters to Llama
Llama hidden size: 4096
[DeviceMap] Llama: {'model.embed_tokens': 0, 'model.rotary_emb': 0, 'model.layers.0': 0, 'model.layers.1': 0, 'model.layers.2': 0, 'model.layers.3': 0, 'model.layers.4': 0, 'model.layers.5': 0, 'model.layers.6': 0, 'model.layers.7': 0, 'model.layers.8': 1, 'model.layers.9': 1, 'model.layers.10': 1, 'model.layers.11': 1, 'model.layers.12': 1, 'model.layers.13': 1, 'model.layers.14': 1, 'model.layers.15': 1, 'model.layers.16': 2, 'model.layers.17': 2, 'model.layers.18': 2, 'model.layers.19': 2, 'model.layers.20': 2, 'model.layers.21': 2, 'model.layers.22': 2, 'model.layers.23': 2, 'model.layers.24': 3, 'model.layers.25': 3, 'model.layers.26': 3, 'model.layers.27': 3, 'model.layers.28': 3, 'model.layers.29': 3, 'model.layers.30': 3, 'model.layers.31': 3, 'model.norm': 3, 'lm_head': 3}
[After Model Loading] [GPU Memory] GPU0:4.8GB(6%), GPU1:4.1GB(5%), GPU2:3.5GB(4%), GPU3:4.5GB(5%) | Total: 17.0GB allocated, 17.1GB reserved, 323.1GB free, Peak: 17.0GB
[INFO] llama anchor tokens: 3
[Optimization] Compiled encoder with torch.compile
[Optimization] Compiled 1 adapters with torch.compile
[Optimization] Compiled 1 deep prefix generators
[Optimization] Compiled latent refiner
[Optimization] Using fused AdamW optimizer
[INFO] LR scheduler: CosineAnnealingLR (T_max=120, eta_min=1.00e-06)
⚠️  No valid checkpoint found to resume; starting fresh.
[warmup] alternating text/latent for first 60 steps
Epoch 1/4
[Epoch 1 Start] [GPU Memory] GPU0:6.1GB(10%), GPU1:4.1GB(5%), GPU2:3.5GB(4%), GPU3:4.5GB(5%) | Total: 18.3GB allocated, 21.0GB reserved, 319.1GB free, Peak: 21.0GB
[warmup] step=0 mode=text (warm-up)
    [Memory after encoder] 18.4GB allocated
We detected that you are passing `past_key_values` as a tuple of tuples. This is deprecated and will be removed in v4.47. Please convert your cache or use an appropriate `Cache` class (https://huggingface.co/docs/transformers/kv_cache#legacy-cache-format)
Traceback (most recent call last):
  File "/projects/m000066/sujinesh/LatentWire/latentwire/train.py", line 3034, in <module>
    main()
  File "/projects/m000066/sujinesh/LatentWire/latentwire/train.py", line 1935, in main
    loss_tf_latent = ctx.wrapper.forward_with_prefix_loss(
  File "/projects/m000066/sujinesh/LatentWire/latentwire/models.py", line 1197, in forward_with_prefix_loss
    modified_hidden_states = self._apply_latent_adapters(out.hidden_states, latent)
  File "/projects/m000066/sujinesh/LatentWire/latentwire/models.py", line 1410, in _apply_latent_adapters
    hs_list[layer_idx] = adapter(hs_list[layer_idx], latent_on_device)
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/projects/m000066/sujinesh/LatentWire/latentwire/models.py", line 773, in forward
    h_ = self.ln(h)
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/modules/normalization.py", line 202, in forward
    return F.layer_norm(
  File "/projects/m000066/sujinesh/LatentWire/.venv/lib/python3.9/site-packages/torch/nn/functional.py", line 2576, in layer_norm
    return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cuda:1! (when checking argument for argument weight in method wrapper_CUDA__native_layer_norm)
Stopping GPU monitoring (PID 282747)
